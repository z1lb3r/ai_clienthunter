# backend/app/main.py
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
from .api.v1 import telegram, moderators, analytics, auth, client_monitoring
from .core.config import settings
from .core.database import supabase_client
from .services.telegram_service import TelegramService
from .services.scheduler_service import scheduler_service
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (startup/shutdown)"""
    # === STARTUP ===
    print("üöÄ MAIN: Starting Multi-Channel Analyzer API...")
    logger.info("Starting Multi-Channel Analyzer API...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    try:
        print("üîß MAIN: Starting scheduler service...")
        await scheduler_service.start()  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω await
        print("‚úÖ MAIN: Scheduler started successfully")
        logger.info("Scheduler started successfully")
    except Exception as e:
        print(f"‚ùå MAIN: Failed to start scheduler: {e}")
        logger.error(f"Failed to start scheduler: {e}")
        import traceback
        logger.error(f"‚ùå MAIN: Traceback: {traceback.format_exc()}")
    
    print("‚úÖ MAIN: Application started successfully. Telegram client will be initialized on demand.")
    logger.info("Application started successfully. Telegram client will be initialized on demand.")
    
    yield  # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–¥–µ—Å—å
    
    # === SHUTDOWN ===
    print("üõë MAIN: Shutting down application...")
    logger.info("Shutting down application...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    try:
        await scheduler_service.stop()  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω await
        print("‚úÖ MAIN: Scheduler stopped successfully")
        logger.info("Scheduler stopped successfully")
    except Exception as e:
        print(f"‚ùå MAIN: Error stopping scheduler: {e}")
        logger.error(f"Error stopping scheduler: {e}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
    telegram_service = TelegramService()
    try:
        await asyncio.wait_for(telegram_service.close(), timeout=5.0)
        print("‚úÖ MAIN: Telegram client closed successfully")
        logger.info("Telegram client closed successfully")
    except asyncio.TimeoutError:
        print("‚ö†Ô∏è MAIN: Timeout occurred while closing Telegram client, forcing shutdown")
        logger.warning("Timeout occurred while closing Telegram client, forcing shutdown")
    except Exception as e:
        print(f"‚ùå MAIN: Error closing Telegram client: {e}")
        logger.error(f"Error closing Telegram client: {e}")
    
    # –Ø–≤–Ω–æ –æ—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    if hasattr(telegram_service, 'client') and telegram_service.client:
        telegram_service.client = None
    
    print("‚úÖ MAIN: Application shutdown complete")

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å lifespan
app = FastAPI(
    title=settings.PROJECT_NAME,
    openapi_url=f"{settings.API_V1_STR}/openapi.json",
    lifespan=lifespan  # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è lifecycle
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],  # Frontend URL
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –í–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(auth.router, prefix=f"{settings.API_V1_STR}/auth", tags=["auth"])
app.include_router(telegram.router, prefix=f"{settings.API_V1_STR}/telegram", tags=["telegram"])
app.include_router(moderators.router, prefix=f"{settings.API_V1_STR}/moderators", tags=["moderators"])
app.include_router(analytics.router, prefix=f"{settings.API_V1_STR}/analytics", tags=["analytics"])

# –ù–û–í–´–ô –†–û–£–¢–ï–†: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–æ–≤
app.include_router(client_monitoring.router, prefix=f"{settings.API_V1_STR}/client-monitoring", tags=["client-monitoring"])

@app.get("/")
async def root():
    return {"message": "Multi-Channel Analyzer API with Client Monitoring"}

# –ù–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@app.get("/health/monitoring")
async def monitoring_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        result = supabase_client.table('monitoring_settings').select('count').execute()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler_running = scheduler_service.scheduler.running if scheduler_service.scheduler else False
        
        return {
            "status": "healthy",
            "database": "connected",
            "scheduler": "running" if scheduler_running else "stopped",
            "timestamp": asyncio.get_event_loop().time()
        }
    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": asyncio.get_event_loop().time()
        }