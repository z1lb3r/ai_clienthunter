# backend/app/services/client_monitoring_service.py
import asyncio
import logging
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Any, Optional
import re
import json

from ..core.database import supabase_client
from ..core.config import settings
from .telegram_service import TelegramService
from .openai_service import OpenAIService

logger = logging.getLogger(__name__)

class ClientMonitoringService:
    def __init__(self):
        self.telegram_service = TelegramService()
        self.openai_service = OpenAIService()
        self.active_monitoring = {}  # –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤ –ø–æ user_id
        
    async def start_monitoring(self, user_id: int):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info(f"Starting monitoring for user {user_id}")
            self.active_monitoring[user_id] = True
            asyncio.create_task(self._monitoring_loop(user_id))
        except Exception as e:
            logger.error(f"Error starting monitoring for user {user_id}: {e}")
            raise
    
    async def stop_monitoring(self, user_id: int):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info(f"Stopping monitoring for user {user_id}")
            self.active_monitoring[user_id] = False
        except Exception as e:
            logger.error(f"Error stopping monitoring for user {user_id}: {e}")
            raise
    
    async def _monitoring_loop(self, user_id: int):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        while self.active_monitoring.get(user_id, False):
            try:
                settings_data = await self._get_user_settings(user_id)
                
                if not settings_data or not settings_data.get('is_active', False):
                    await asyncio.sleep(60)
                    continue
                
                await self._search_and_analyze(user_id, settings_data)
                
                interval = settings_data.get('check_interval_minutes', 5) * 60
                await asyncio.sleep(interval)
                
            except Exception as e:
                logger.error(f"Error in monitoring loop for user {user_id}: {e}")
                await asyncio.sleep(60)
    
    async def _get_user_settings(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            result = supabase_client.table('monitoring_settings').select('*').eq('user_id', user_id).execute()
            return result.data[0] if result.data else None
        except Exception as e:
            logger.error(f"Error getting user settings: {e}")
            return None
    
    async def search_and_analyze(self, user_id: int, settings: Dict[str, Any]):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        logger.info(f"üî• –í–•–û–î –í search_and_analyze –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        try:
            logger.info(f"üöÄ –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã
            templates = await self._get_user_templates(user_id)
            if not templates:
                logger.info(f"‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return
            
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(templates)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º—É —Ü–∏–∫–ª—É
            total_messages_found = 0
            total_keyword_matches = 0
            total_ai_analyzed = 0
            total_clients_found = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —à–∞–±–ª–æ–Ω
            for template_idx, template in enumerate(templates, 1):
                template_name = template.get('name', 'Unknown')
                template_id = template.get('id', 'Unknown')
                
                logger.info(f"üìä –®–ê–ë–õ–û–ù {template_idx}/{len(templates)}: '{template_name}' (ID: {template_id})")
                
                # –ü–∞—Ä—Å–∏–º keywords
                keywords = self._parse_keywords(template.get('keywords'))
                if not keywords:
                    logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —à–∞–±–ª–æ–Ω–µ '{template_name}' - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                    
                logger.info(f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")
                
                # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
                monitored_chats = template.get('chat_ids', [])
                if not monitored_chats:
                    logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —à–∞–±–ª–æ–Ω–µ '{template_name}' - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                    
                logger.info(f"üí¨ –ú–æ–Ω–∏—Ç–æ—Ä–∏–º {len(monitored_chats)} —á–∞—Ç–æ–≤: {monitored_chats}")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —à–∞–±–ª–æ–Ω—É
                template_messages = 0
                template_keyword_matches = 0
                template_ai_analyzed = 0
                template_clients_found = 0
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞—Ç
                for chat_idx, chat_id in enumerate(monitored_chats, 1):
                    try:
                        logger.info(f"  üì± –ß–ê–¢ {chat_idx}/{len(monitored_chats)}: {chat_id}")
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                        lookback_minutes = template.get('lookback_minutes', 5)
                        messages = await self._get_recent_messages(chat_id, lookback_minutes)
                        
                        if not messages:
                            logger.info(f"    üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {lookback_minutes} –º–∏–Ω—É—Ç")
                            continue
                            
                        template_messages += len(messages)
                        logger.info(f"    üì® –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {lookback_minutes} –º–∏–Ω—É—Ç")
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        chat_keyword_matches = 0
                        logger.info(f"    üîÑ –ù–ê–ß–ò–ù–ê–ï–ú –æ–±—Ä–∞–±–æ—Ç–∫—É {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                        logger.info(f"    üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: {keywords} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(keywords)})")

                        for msg_idx, message in enumerate(messages, 1):
                            try:
                                message_text = message.get('text', '')
                                
                                logger.info(f"    üì® –°–û–û–ë–©–ï–ù–ò–ï {msg_idx}/{len(messages)}:")
                                logger.info(f"        üìù –¢–µ–∫—Å—Ç: '{message_text}'")
                                logger.info(f"        üìè –î–ª–∏–Ω–∞: {len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
                                if not message_text:
                                    logger.info(f"        ‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                                    continue
                                    
                                if not keywords:
                                    logger.info(f"        ‚ö†Ô∏è –ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                                    continue
                                    
                                logger.info(f"        üöÄ –í–´–ó–´–í–ê–ï–ú _find_keywords_in_message")
                                
                                matched_keywords = self._find_keywords_in_message(message_text, keywords)
                                
                                logger.info(f"        ‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –ø–æ–∏—Å–∫–∞: {matched_keywords}")
                                
                                if matched_keywords:
                                    chat_keyword_matches += 1
                                    template_keyword_matches += 1
                                    
                                    logger.info(f"    üéØ –°–û–í–ü–ê–î–ï–ù–ò–ï –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {matched_keywords}")
                                    logger.info(f"    üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: '{message_text[:100]}...'")
                                    
                                    # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –ò–ò
                                    try:
                                        template_ai_analyzed += 1
                                        await self._analyze_message_with_ai(
                                            user_id, chat_id, 
                                            message.get('chat_title', f'Chat {chat_id}'),
                                            {
                                                'message': message,
                                                'template': template,
                                                'matched_keywords': matched_keywords
                                            },
                                            settings
                                        )
                                        template_clients_found += 1
                                        
                                    except Exception as ai_error:
                                        logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {ai_error}")
                                        
                            except Exception as msg_error:
                                logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_idx}: {msg_error}")
                                continue
                        
                        if chat_keyword_matches > 0:
                            logger.info(f"    ‚úÖ –ß–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {chat_keyword_matches} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
                        else:
                            logger.info(f"    ‚ö™ –ß–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
                    except Exception as chat_error:
                        logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞ {chat_id}: {chat_error}")
                        continue
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —à–∞–±–ª–æ–Ω—É
                logger.info(f"üìà –ò–¢–û–ì –®–ê–ë–õ–û–ù–ê '{template_name}':")
                logger.info(f"   üì® –°–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {template_messages}")
                logger.info(f"   üéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {template_keyword_matches}")
                logger.info(f"   ü§ñ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ AI: {template_ai_analyzed}")
                logger.info(f"   ‚úÖ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {template_clients_found}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
                total_messages_found += template_messages
                total_keyword_matches += template_keyword_matches
                total_ai_analyzed += template_ai_analyzed
                total_clients_found += template_clients_found
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º—É —Ü–∏–∫–ª—É
            logger.info(f"üèÅ –ò–¢–û–ì –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
            logger.info(f"   üìã –®–∞–±–ª–æ–Ω–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(templates)}")
            logger.info(f"   üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages_found}")
            logger.info(f"   üéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {total_keyword_matches}")
            logger.info(f"   ü§ñ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ AI: {total_ai_analyzed}")
            logger.info(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_clients_found}")
            
        except Exception as e:
            logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            raise
            
    def _parse_keywords(self, keywords_raw) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –ë–î"""
        if isinstance(keywords_raw, list):
            return keywords_raw
        elif isinstance(keywords_raw, str):
            try:
                return json.loads(keywords_raw)
            except Exception:
                logger.warning(f"Failed to parse keywords JSON: {keywords_raw}")
                return []
        else:
            logger.warning(f"Unexpected keywords type: {type(keywords_raw)}")
            return []
    
    async def _get_user_templates(self, user_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            result = supabase_client.table('product_templates').select('*').eq('user_id', user_id).eq('is_active', True).execute()
            return result.data or []
        except Exception as e:
            logger.error(f"Error getting user templates: {e}")
            return []
    
    async def _get_recent_messages(self, chat_id: str, lookback_minutes: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∏–Ω—É—Ç"""
        try:
            logger.debug(f"Getting messages from last {lookback_minutes} minutes from chat {chat_id}")
            
            cutoff_time = datetime.now(timezone.utc) - timedelta(minutes=lookback_minutes)
            
            messages = await self.telegram_service.get_group_messages(
                group_id=chat_id,
                limit=100,
                offset_date=cutoff_time
            )
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            filtered_messages = []
            for msg in messages:
                msg_date = msg.get('date')
                if msg_date and datetime.fromisoformat(msg_date.replace('Z', '+00:00')) >= cutoff_time:
                    filtered_messages.append(msg)
            
            logger.debug(f"Found {len(filtered_messages)} messages after time filtering")
            return filtered_messages
            
        except Exception as e:
            logger.error(f"Error getting messages from chat {chat_id}: {e}")
            return []
    
    def _find_keywords_in_message(self, message_text: str, keywords: List[str]) -> List[str]:
        """–ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        if not message_text or not keywords:
            return []
        
        logger.info(f"üîç –ü–û–ò–°–ö: '{message_text}'")
        logger.info(f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")
        
        found_keywords = []
        message_lower = message_text.lower()
        
        for keyword in keywords:
            keyword_lower = keyword.lower()
            if keyword_lower in message_lower:
                found_keywords.append(keyword)
                logger.info(f"   ‚úÖ '{keyword}' ‚Üí –ù–ê–ô–î–ï–ù–û")
            else:
                logger.info(f"   ‚ùå '{keyword}' ‚Üí –ù–ï –ù–ê–ô–î–ï–ù–û")
        
        logger.info(f"üéØ –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {found_keywords}")
        return found_keywords
    
    async def _analyze_message_with_ai(
        self, 
        user_id: int, 
        chat_id: str, 
        chat_name: str,
        message_data: Dict[str, Any], 
        settings: Dict[str, Any]
    ):
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ò–ò - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞"""
        try:
            message = message_data['message']
            template = message_data['template']
            matched_keywords = message_data['matched_keywords']
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò
            author_info = {
               'telegram_id': message.get('from_id', 'unknown'),
               'username': message.get('user_info', {}).get('username', ''),       # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û
               'first_name': message.get('user_info', {}).get('first_name', ''),   # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û
               'last_name': message.get('user_info', {}).get('last_name', '')      # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û
            }
            
            chat_info = {
                'chat_id': chat_id,
                'chat_name': chat_name
            }
            
            message_text = message.get('text', '')  # ‚Üê –ò–ó–ú–ï–ù–ï–ù–û: –±—ã–ª–æ 'message'
            
            logger.info(f"ü§ñ AI –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç @{author_info.get('username', 'unknown')} –≤ —á–∞—Ç–µ {chat_name}")
            
            # –í—ã–∑—ã–≤–∞–µ–º –ò–ò –∞–Ω–∞–ª–∏–∑ (—É–±—Ä–∞–ª–∏ custom_prompt –∏ confidence)
            ai_result = await self.openai_service.analyze_potential_client(
                message_text=message_text,
                product_name=template.get('name', 'Unknown Product'),
                keywords=template.get('keywords', []),
                matched_keywords=matched_keywords,
                author_info=author_info,
                chat_info=chat_info
            )
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –Ω–µ—Ç
            if ai_result.get('is_client', False):
                logger.info(f"‚úÖ AI –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞–∫ –ö–õ–ò–ï–ù–¢–ê: {ai_result.get('reasoning', '')[:100]}...")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                await self._save_potential_client(
                    user_id=user_id,
                    message=message,
                    template=template,
                    matched_keywords=matched_keywords,
                    ai_result=ai_result,
                    chat_id=chat_id,
                    chat_name=chat_name
                )
                
                # –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                await self._send_notifications(
                    user_id=user_id,
                    message=message,
                    template=template, 
                    ai_result=ai_result,
                    settings=settings
                )
            else:
                logger.info(f"‚ùå AI –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞–∫ –ù–ï –ö–õ–ò–ï–ù–¢–ê: {ai_result.get('reasoning', '')[:100]}...")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await self._save_potential_client(
                user_id=user_id,
                message=message_data['message'],
                template=message_data['template'],
                matched_keywords=message_data['matched_keywords'],
                ai_result={'is_client': True, 'reasoning': f'–û—à–∏–±–∫–∞ AI: {str(e)}'},
                chat_id=chat_id,
                chat_name=chat_name
            )
            
    async def _save_potential_client(
        self, 
        user_id: int, 
        message: Dict[str, Any], 
        template: Dict[str, Any],
        matched_keywords: List[str], 
        ai_result: Dict[str, Any],
        chat_id: str,
        chat_name: str
    ):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î"""
        try:
            client_data = {
                'user_id': user_id,
                'author_id': str(message.get('from_id', '')),
                'author_username': message.get('user_info', {}).get('username', ''),  
                'message_text': message.get('text', ''),
                'message_id': message.get('id', 0),
                'chat_id': chat_id,
                'chat_name': chat_name,
                'product_template_id': template.get('id'),
                'template_name': template.get('name', ''),
                'matched_keywords': matched_keywords,
                'ai_explanation_text': ai_result.get('reasoning', ''),
                'client_status': 'new',
                'notification_send': False,
                'created_at': datetime.now().isoformat()
            }
            # ‚úÖ –£–±—Ä–∞–Ω—ã –ø–æ–ª—è: ai_confidence, ai_intent_type, updated_at, first_name, last_name
            
            result = supabase_client.table('potential_clients').insert(client_data).execute()
            
            if result.data:
                logger.info(f"Saved potential client: {client_data.get('author_username', 'unknown')}")  
            else:
                logger.error("Failed to save potential client")
                
        except Exception as e:
            logger.error(f"Error saving potential client: {e}")
    
    async def _send_notifications(
        self, 
        user_id: int, 
        message: Dict[str, Any], 
        template: Dict[str, Any],
        ai_result: Dict[str, Any], 
        settings: Dict[str, Any]
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ"""
        try:
            notification_accounts = settings.get('notification_account', [])
            if not notification_accounts:
                logger.debug("No notification accounts configured")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_text = self._format_notification(message, template, ai_result)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for account in notification_accounts:
                try:
                    await self.telegram_service.send_private_message(account, notification_text)  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ send_message
                    logger.info(f"Notification sent to {account}")
                except Exception as send_error:
                    logger.error(f"Failed to send notification to {account}: {send_error}")
                    
        except Exception as e:
            logger.error(f"Error sending notifications: {e}")
    
    def _format_notification(
        self, 
        message: Dict[str, Any], 
        template: Dict[str, Any],
        ai_result: Dict[str, Any]
    ) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        
        # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Telegram API
        username = message.get('user_info', {}).get('username', 'unknown')
        first_name = message.get('user_info', {}).get('first_name', '')
        
        # ‚úÖ –î–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –±–µ—Ä–µ–º –∏–∑ ai_result (—Ç–∞–º –æ–Ω–∏ –µ—Å—Ç—å)
        chat_name = ai_result.get('chat_info', {}).get('chat_name', 'Unknown Chat')
        chat_id = ai_result.get('chat_info', {}).get('chat_id', 'unknown')
        
        # ‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ ai_result
        matched_keywords = ai_result.get('matched_keywords', [])
        
        # ‚úÖ ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ message
        message_id = message.get('message_id', message.get('id', 0))
        
        # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É (—É–±–∏—Ä–∞–µ–º 'c/' –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if chat_id != 'unknown' and message_id:
            # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤ –Ω—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç /c/
            if str(chat_id).startswith('-100'):
                clean_chat_id = str(chat_id)[4:]  # —É–±–∏—Ä–∞–µ–º -100
                message_link = f"https://t.me/c/{clean_chat_id}/{message_id}"
            else:
                message_link = f"https://t.me/{chat_id}/{message_id}"
        else:
            message_link = "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        return f"""üéØ –ù–û–í–´–ô –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ô –ö–õ–ò–ï–ù–¢

    üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} ({first_name})
    üí¨ –ß–∞—Ç: {chat_name}
    üìã –®–∞–±–ª–æ–Ω: {template.get('name', 'Unknown')}
    üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(matched_keywords)}

    üìù –°–æ–æ–±—â–µ–Ω–∏–µ:
    {message.get('text', '')[:300]}{'...' if len(message.get('text', '')) > 300 else ''}

    ü§ñ –ê–Ω–∞–ª–∏–∑ –ò–ò:
    {ai_result.get('reasoning', '–ù–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è')}

    üîó –°—Å—ã–ª–∫–∞: {message_link}
    ‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
    """