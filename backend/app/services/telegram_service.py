# backend/app/services/telegram_service.py - –û–ß–ò–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import asyncio
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime, timezone, timedelta

from telethon import TelegramClient
from telethon.types import User, Chat, Channel, Message
from telethon.sessions import StringSession

from app.core.config import settings
from app.core.database import supabase_client

logger = logging.getLogger(__name__)

class TelegramService:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —Å–µ—Ä–≤–∏—Å–∞"""
        self.api_id = settings.TELEGRAM_API_ID
        self.api_hash = settings.TELEGRAM_API_HASH
        self.session_string = settings.TELEGRAM_SESSION_STRING
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π
        session = StringSession(self.session_string) if self.session_string else StringSession()
        self.client = TelegramClient(session, self.api_id, self.api_hash)
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª–∏–µ–Ω—Ç—É
        self.client_lock = asyncio.Lock()
        
        logger.info("üöÄ Telegram Service initialized")
    
    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ Telegram –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            await self.client.start()
            
            # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –ø—É—Å—Ç–∞—è, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏
            if not self.session_string:
                self.session_string = self.client.session.save()
                logger.info("üìù Generated new session string")
                
            me = await self.client.get_me()
            logger.info(f"‚úÖ Telegram client started. Logged in as: {me.first_name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to start Telegram client: {e}")
            return False
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ Telegram –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            if self.client.is_connected():
                await self.client.disconnect()
                logger.info("‚úÖ Telegram client disconnected")
        except Exception as e:
            logger.error(f"‚ùå Error closing Telegram client: {e}")
    
    async def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        try:
            return self.client.is_connected()
        except Exception:
            return False
    
    async def ensure_connected(self):
        """–û–±–µ—Å–ø–µ—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        try:
            if not self.client.is_connected():
                print("üîå TELEGRAM: Connecting to Telegram...")
                await self.client.connect()
                print("‚úÖ TELEGRAM: Connected to Telegram")
            
            # –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –î–æ–±–∞–≤–ª—è–µ–º await
            if not await self.client.is_user_authorized():
                print("‚ùå TELEGRAM: User not authorized! Need to login first")
                logger.error("Telegram user not authorized. Run authorization script first.")
                raise Exception("Telegram user not authorized. Please run authorization first.")
            else:
                print("‚úÖ TELEGRAM: User is authorized")
                
        except Exception as e:
            logger.error(f"Error ensuring Telegram connection: {e}")
            print(f"‚ùå TELEGRAM: Connection error: {e}")
            raise
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Telegram —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            await self.ensure_connected()
            me = await self.client.get_me()
            
            return {
                "status": "healthy",
                "connected": True,
                "user_id": me.id,
                "username": me.username,
                "first_name": me.first_name
            }
        except Exception as e:
            return {
                "status": "error",
                "connected": False,
                "error": str(e)
            }
    
    async def execute_telegram_operation(self, operation):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å Telegram
        
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ:
        1. –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω
        2. –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ (–±–µ–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
        3. –û–ø–µ—Ä–∞—Ü–∏—è –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
        """
        max_retries = 3
        retry_delay = 2
        
        for attempt in range(max_retries):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                async with self.client_lock:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    await self.ensure_connected()
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
                    return await operation()
                    
            except asyncio.CancelledError:
                logger.warning(f"Operation was cancelled (attempt {attempt+1}/{max_retries})")
                if attempt == max_retries - 1:
                    logger.error("All retry attempts failed due to cancellation")
                    raise ValueError("Operation was repeatedly cancelled. Please try again later.")
                
                # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(retry_delay * (2 ** attempt))
                
            except Exception as e:
                logger.error(f"Operation failed (attempt {attempt+1}/{max_retries}): {e}")
                if attempt == max_retries - 1:
                    logger.error("All retry attempts failed")
                    raise
                
                # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(retry_delay * (2 ** attempt))
    
    async def get_group_messages(
        self, 
        group_id: str, 
        limit: int = 2000,
        offset_date: Optional[datetime] = None,
        include_replies: bool = True,
        get_users: bool = True,
        save_to_db: bool = False,
        days_back: Optional[int] = None
    ) -> List[Dict[str, Any]]:
        """
        –ë–ï–ó–û–ü–ê–°–ù–´–ô –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã
        –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏ + –ª–æ–≥–∏–∫–∞ offset_date
        """
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await self.ensure_connected()
            
            # –ü–æ–ª—É—á–∞–µ–º entity –Ω–∞–ø—Ä—è–º—É—é
            try:
                if str(group_id).lstrip('-').isdigit():
                    entity = await self.client.get_entity(int(group_id))
                else:
                    entity = await self.client.get_entity(group_id)
            except Exception as e:
                logger.error(f"Failed to get entity for group {group_id}: {e}")
                return []
            
            # –õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            cutoff_date = None
            if offset_date is not None:
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É offset_date (–¥–ª—è client_monitoring)
                cutoff_date = offset_date
                logger.info(f"Getting messages newer than {cutoff_date.strftime('%Y-%m-%d %H:%M:%S')} (using offset_date)")
            elif days_back is not None and days_back > 0:
                # Fallback –Ω–∞ days_back (–¥–ª—è –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã)
                cutoff_date = datetime.now(timezone.utc) - timedelta(days=days_back)
                logger.info(f"Getting messages newer than {cutoff_date.strftime('%Y-%m-%d %H:%M:%S')} (last {days_back} days)")
            else:
                logger.info(f"Getting last {limit} messages (no date filtering)")
            
            messages = []
            users_cache = {}
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            async for message in self.client.iter_messages(entity, limit=limit):
                # –ö–õ–Æ–ß–ï–í–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä—à–µ cutoff_date - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if cutoff_date is not None and message.date < cutoff_date:
                    logger.info(f"Reached message from {message.date.strftime('%Y-%m-%d %H:%M:%S')} - stopping")
                    break
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    msg_data = {
                        'message_id': str(message.id),
                        'text': message.text or "",
                        'date': message.date.isoformat(),
                        'sender_id': str(message.sender_id) if message.sender_id else None,
                        'is_reply': message.is_reply,
                        'reply_to_message_id': str(message.reply_to_msg_id) if message.reply_to_msg_id else None,
                        'forward_from': None,
                        'media_type': None,
                        'edit_date': message.edit_date.isoformat() if message.edit_date else None,
                        'views': getattr(message, 'views', None),
                        'user_info': None,
                        'chat_id': str(group_id),
                        'chat_title': getattr(entity, 'title', f'Chat {group_id}') 
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
                    if get_users and message.sender_id:
                        user_id_str = str(message.sender_id)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        if user_id_str not in users_cache:
                            try:
                                user = await self.client.get_entity(message.sender_id)
                                users_cache[user_id_str] = {
                                    'telegram_id': str(user.id),
                                    'username': user.username,
                                    'first_name': user.first_name,
                                    'last_name': user.last_name,
                                    'is_bot': getattr(user, 'bot', False)
                                }
                            except:
                                users_cache[user_id_str] = {
                                    'telegram_id': user_id_str,
                                    'username': None,
                                    'first_name': None,
                                    'last_name': None,
                                    'is_bot': False
                                }
                        
                        msg_data['user_info'] = users_cache[user_id_str]
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
                    if message.media:
                        if hasattr(message.media, 'photo'):
                            msg_data['media_type'] = 'photo'
                        elif hasattr(message.media, 'video'):
                            msg_data['media_type'] = 'video'
                        elif hasattr(message.media, 'document'):
                            msg_data['media_type'] = 'document'
                        else:
                            msg_data['media_type'] = 'other'
                    
                    messages.append(msg_data)
                    
                except Exception as message_error:
                    logger.warning(f"Failed to process message {message.id}: {message_error}")
                    continue
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if cutoff_date:
                logger.info(f"Retrieved {len(messages)} messages newer than {cutoff_date.strftime('%Y-%m-%d %H:%M:%S')}")
            else:
                logger.info(f"Retrieved {len(messages)} latest messages (limit={limit})")
            
            return messages
            
        except Exception as e:
            logger.error(f"Error getting messages from group {group_id}: {e}")
            return []
    
    async def get_entity(self, identifier):
        """–ü–æ–ª—É—á–∏—Ç—å entity –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É"""
        await self.ensure_connected()
        return await self.client.get_entity(identifier)
    
    async def get_group_info(self, link_or_username: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ"""
        async def operation():
            try:
                entity = await self.client.get_entity(link_or_username)
                
                if isinstance(entity, (Chat, Channel)):
                    group_info = {
                        'id': str(entity.id),
                        'title': entity.title,
                        'username': getattr(entity, 'username', None),
                        'participants_count': getattr(entity, 'participants_count', None),
                        'description': getattr(entity, 'about', None)
                    }
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
                    if isinstance(entity, Channel):
                        group_info.update({
                            'is_broadcast': getattr(entity, 'broadcast', False),
                            'is_megagroup': getattr(entity, 'megagroup', False)
                        })
                    
                    logger.info(f"Retrieved info for group {link_or_username}")
                    return group_info
                
                logger.warning(f"Entity {link_or_username} is not a group or channel")
                return {}
            except Exception as e:
                logger.error(f"Error getting entity {link_or_username}: {e}")
                return {}
                
        try:
            return await self.execute_telegram_operation(operation)
        except Exception as e:
            logger.error(f"Error retrieving group info for {link_or_username}: {e}")
            return {}
    
    async def get_moderators(self, group_id: str, save_to_db: bool = False) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã"""
        async def operation():
            try:
                entity = await self.client.get_entity(group_id)
                moderators = []
                
                async for participant in self.client.iter_participants(entity, filter=None):
                    if hasattr(participant.participant, 'admin_rights') and participant.participant.admin_rights:
                        moderator = {
                            'telegram_id': str(participant.id),
                            'username': participant.username,
                            'first_name': participant.first_name,
                            'last_name': participant.last_name,
                            'is_creator': hasattr(participant.participant, 'creator') and participant.participant.creator,
                            'admin_rights': str(participant.participant.admin_rights)
                        }
                        moderators.append(moderator)
                
                logger.info(f"Found {len(moderators)} moderators in group {group_id}")
                return moderators
                
            except Exception as e:
                logger.error(f"Error getting moderators for group {group_id}: {e}")
                return []
        
        try:
            return await self.execute_telegram_operation(operation)
        except Exception as e:
            logger.error(f"Error retrieving moderators for group {group_id}: {e}")
            return []
    
    async def send_private_message(self, username: str, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            await self.ensure_connected()
            
            # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
            clean_username = username.lstrip('@')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.client.send_message(clean_username, message)
            logger.info(f"‚úÖ Sent notification to {username}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to send message to {username}: {e}")
            return False
        
    async def resolve_chat_link(self, chat_link: str) -> Optional[str]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É t.me –≤ chat_id
        
        Args:
            chat_link: –°—Å—ã–ª–∫–∞ –≤–∏–¥–∞ https://t.me/username –∏–ª–∏ @username
            
        Returns:
            chat_id –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏
        """
        try:
            await self.ensure_connected()
            
            # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –¥–æ username
            username = self._extract_username_from_link(chat_link)
            if not username:
                logger.error(f"Cannot extract username from link: {chat_link}")
                return None
                
            logger.info(f"Resolving username: {username}")
            
            # –ü–æ–ª—É—á–∞–µ–º entity —á–µ—Ä–µ–∑ Telethon
            entity = await self.client.get_entity(username)
            
            # –ü–æ–ª—É—á–∞–µ–º chat_id
            if isinstance(entity, Channel):
            # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø –Ω—É–∂–µ–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º -100
                chat_id = f"-100{entity.id}"
            elif isinstance(entity, Chat):
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø –ø—Ä–æ—Å—Ç–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID
                chat_id = f"-{entity.id}"
            else:
                # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                chat_id = str(entity.id)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
            if hasattr(entity, 'migrated_to') and entity.migrated_to:
                # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –º–∏–≥—Ä–∏—Ä–æ–≤–∞–ª –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É
                chat_id = f"-100{entity.migrated_to.channel_id}"

            print(f"üîó RESOLVE: Entity type: {type(entity).__name__}, Raw ID: {entity.id}, Chat ID: {chat_id}")


                
            logger.info(f"‚úÖ Resolved {username} -> {chat_id}")
            return chat_id
            
        except Exception as e:
            logger.error(f"‚ùå Failed to resolve chat link {chat_link}: {e}")
            return None

    def _extract_username_from_link(self, chat_link: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á—å username –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å—Å—ã–ª–æ–∫"""
        try:
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
            link = chat_link.strip()
            
            # –ï—Å–ª–∏ —É–∂–µ username –±–µ–∑ —Å—Å—ã–ª–∫–∏
            if link.startswith('@'):
                return link[1:]  # —É–±–∏—Ä–∞–µ–º @
                
            # –ï—Å–ª–∏ –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞ https://t.me/username
            if 't.me/' in link:
                parts = link.split('t.me/')
                if len(parts) > 1:
                    username = parts[1].strip('/')
                    # –£–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ ?
                    if '?' in username:
                        username = username.split('?')[0]
                    return username
                    
            # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ username –±–µ–∑ @
            if link and not link.startswith('http'):
                return link
                
            return None
            
        except Exception as e:
            logger.error(f"Error extracting username from {chat_link}: {e}")
            return None

    async def resolve_multiple_chat_links(self, chat_links: List[str]) -> Dict[str, Optional[str]]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å {—Å—Å—ã–ª–∫–∞: chat_id –∏–ª–∏ None}
        """
        results = {}
        
        print(f"üîó RESOLVING {len(chat_links)} chat links:")
        for i, link in enumerate(chat_links):
            print(f"  {i+1}. '{link}'")
        
        for link in chat_links:
            chat_id = await self.resolve_chat_link(link)
            results[link] = chat_id
            print(f"üîó RESULT: '{link}' -> {chat_id}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä–≤–∞—Ç—å—Å—è –Ω–∞ –ª–∏–º–∏—Ç—ã
            await asyncio.sleep(0.5)
        
        return results
        
    def generate_session_string(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏"""
        return self.client.session.save()
    

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
telegram_service = TelegramService()


    