# backend/app/services/openai_service.py - –û–ß–ò–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import asyncio
import json
import logging
from typing import List, Dict, Any, Optional
from openai import AsyncOpenAI
from datetime import datetime

from app.core.config import settings

logger = logging.getLogger(__name__)

class OpenAIService:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI —Å–µ—Ä–≤–∏—Å–∞"""
        self.client = AsyncOpenAI(api_key=settings.OPENAI_API_KEY)
        logger.info("‚úÖ OpenAI Service initialized")
    
    async def analyze_potential_client(
        self,
        message_text: str,
        product_name: str,
        keywords: List[str],
        matched_keywords: List[str],
        author_info: Dict[str, Any],
        chat_info: Dict[str, Any],
        custom_prompt: str
    ) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        
        Args:
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            product_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞/—É—Å–ª—É–≥–∏
            keywords: –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —à–∞–±–ª–æ–Ω–∞
            matched_keywords: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            author_info: –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            chat_info: –î–∞–Ω–Ω—ã–µ —á–∞—Ç–∞/–≥—Ä—É–ø–ø—ã
            custom_prompt: –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å confidence, intent_type, reasoning –∏ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫–∞–∫ system_prompt
            system_prompt = custom_prompt

            user_prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

    –ü–†–û–î–£–ö–¢/–£–°–õ–£–ì–ê: {product_name}
    –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê: {', '.join(keywords)}
    –ù–ê–ô–î–ï–ù–ù–´–ï –°–õ–û–í–ê: {', '.join(matched_keywords)}

    –ê–í–¢–û–† –°–û–û–ë–©–ï–ù–ò–Ø:
    - ID: {author_info.get('telegram_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}
    - Username: @{author_info.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}
    - –ò–º—è: {author_info.get('first_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

    –ß–ê–¢/–ì–†–£–ü–ü–ê:
    - ID: {chat_info.get('chat_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}
    - –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_info.get('chat_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

    –°–û–û–ë–©–ï–ù–ò–ï:
    "{message_text}"

    –û—Ü–µ–Ω–∏ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10 —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å.
    –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –Ω–∞–º–µ—Ä–µ–Ω–∏—è.
    –û–±—ä—è—Å–Ω–∏ —Å–≤–æ–π –∞–Ω–∞–ª–∏–∑.

    –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
    {{
        "confidence": —á–∏—Å–ª–æ_–æ—Ç_1_–¥–æ_10,
        "intent_type": "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è|–ø–æ–∫—É–ø–∫–∞|—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ|–ø—Ä–æ–¥–∞–∂–∞|–¥—Ä—É–≥–æ–µ",
        "reasoning": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞",
        "message_data": {{
            "text": "{message_text}",
            "matched_keywords": {matched_keywords},
            "author": {{
                "id": "{author_info.get('telegram_id', '')}",
                "username": "{author_info.get('username', '')}",
                "name": "{author_info.get('first_name', '')} {author_info.get('last_name', '')}"
            }},
            "chat": {{
                "id": "{chat_info.get('chat_id', '')}",
                "name": "{chat_info.get('chat_name', '')}"
            }}
        }}
    }}"""

            logger.info("üì§ Sending client analysis request to OpenAI with custom prompt...")
            
            # –ó–∞–ø—Ä–æ—Å –∫ OpenAI
            response = await asyncio.wait_for(
                self.client.chat.completions.create(
                    model="gpt-4o-mini", 
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ],
                    temperature=0.3,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    max_tokens=2000
                ),
                timeout=60.0
            )
            
            logger.info("‚úÖ Received client analysis response from OpenAI")
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            result = self._parse_client_response(response.choices[0].message.content)
            
            logger.info(f"üéØ Analysis result: confidence={result.get('confidence', 0)}, intent={result.get('intent_type', 'unknown')}")
            
            return result
            
        except asyncio.TimeoutError:
            logger.error("‚è∞ OpenAI request timed out for client analysis")
            return self._get_client_fallback_result(message_text, author_info, chat_info)
        except Exception as e:
            logger.error(f"‚ùå Error in potential client analysis: {e}")
            return self._get_client_fallback_result(message_text, author_info, chat_info)
    
    def _parse_client_response(self, response_text: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        try:
            # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ markdown –±–ª–æ–∫–∏
            cleaned_text = response_text.strip()
            if cleaned_text.startswith('```json'):
                cleaned_text = cleaned_text[7:]
            if cleaned_text.endswith('```'):
                cleaned_text = cleaned_text[:-3]
            
            cleaned_text = cleaned_text.strip()
            
            # –ü–∞—Ä—Å–∏–º JSON
            result = json.loads(cleaned_text)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if 'confidence' not in result:
                result['confidence'] = 5
            if 'intent_type' not in result:
                result['intent_type'] = 'unknown'
            if 'reasoning' not in result:
                result['reasoning'] = '–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω'
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ confidence –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            result['confidence'] = max(1, min(10, int(result['confidence'])))
            
            return result
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå Failed to parse OpenAI response as JSON: {e}")
            logger.error(f"Raw response: {response_text}")
            return self._get_client_fallback_result("", {}, {})
        except Exception as e:
            logger.error(f"‚ùå Error parsing client analysis response: {e}")
            return self._get_client_fallback_result("", {}, {})
    
    def _get_client_fallback_result(
        self, 
        message_text: str, 
        author_info: Dict[str, Any], 
        chat_info: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        return {
            "confidence": 5,
            "intent_type": "unknown",
            "reasoning": "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –ò–ò. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.",
            "message_data": {
                "text": message_text,
                "matched_keywords": [],
                "author": {
                    "id": author_info.get('telegram_id', ''),
                    "username": author_info.get('username', ''),
                    "name": f"{author_info.get('first_name', '')} {author_info.get('last_name', '')}"
                },
                "chat": {
                    "id": chat_info.get('chat_id', ''),
                    "name": chat_info.get('chat_name', '')
                }
            },
            "error": True
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
openai_service = OpenAIService()